package me.davidcanhelp.chatgpt;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.MediaType;
import org.json.JSONArray;
import org.json.JSONObject;
import java.util.ArrayList;
import java.util.List;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//me.davidcanhelp.chatgpt//ChatWindow//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ChatWindowTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true) // TODO try different modes
@ActionID(category = "Window", id = "me.davidcanhelp.chatgpt.ChatWindowTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ChatWindowAction",
        preferredID = "ChatWindowTopComponent"
)
@Messages({
    "CTL_ChatWindowAction=ChatGPT API Client",
    "CTL_ChatWindowTopComponent=ChatGPT API Client",
    "HINT_ChatWindowTopComponent=This is a ChatGPT API Client window"
})
/**
 * @author David Liedle <david.liedle@protonmail.com>
 * @author ChatGPT 4o
 * @license MIT
 * 
 * This ChatWindow Top Component targets the editor pane.
 */
public final class ChatWindowTopComponent extends TopComponent {

    private JSONArray conversationHistory = new JSONArray();
    private String systemPrompt = "You are ChatGPT integrated with NetBeans.";
    private String currentModel = "gpt-4o";

    public ChatWindowTopComponent() {
        initComponents();
        setName(Bundle.CTL_ChatWindowTopComponent());
        setToolTipText(Bundle.HINT_ChatWindowTopComponent());

        // Initialize conversation with a system prompt
        conversationHistory.put(new JSONObject().put("role", "system").put("content", systemPrompt));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        promptTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        responseTextArea = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        modelComboBox = new javax.swing.JComboBox<>();

        setLayout(new java.awt.GridBagLayout());

        promptTextField.setBackground(new java.awt.Color(51, 51, 51));
        promptTextField.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        promptTextField.setForeground(new java.awt.Color(0, 255, 0));
        promptTextField.setText(org.openide.util.NbBundle.getMessage(ChatWindowTopComponent.class, "ChatWindowTopComponent.promptTextField.text")); // NOI18N
        promptTextField.setToolTipText(org.openide.util.NbBundle.getMessage(ChatWindowTopComponent.class, "ChatWindowTopComponent.promptTextField.toolTipText")); // NOI18N
        promptTextField.setCaretColor(new java.awt.Color(0, 255, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 233;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(promptTextField, gridBagConstraints);

        responseTextArea.setEditable(false);
        responseTextArea.setBackground(new java.awt.Color(51, 51, 51));
        responseTextArea.setColumns(20);
        responseTextArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        responseTextArea.setForeground(new java.awt.Color(0, 255, 0));
        responseTextArea.setLineWrap(true);
        responseTextArea.setRows(5);
        responseTextArea.setText(org.openide.util.NbBundle.getMessage(ChatWindowTopComponent.class, "ChatWindowTopComponent.responseTextArea.text")); // NOI18N
        jScrollPane1.setViewportView(responseTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 370;
        gridBagConstraints.ipady = 233;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 6);
        add(jScrollPane1, gridBagConstraints);

        sendButton.setBackground(new java.awt.Color(51, 51, 51));
        sendButton.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        sendButton.setForeground(new java.awt.Color(0, 255, 0));
        org.openide.awt.Mnemonics.setLocalizedText(sendButton, org.openide.util.NbBundle.getMessage(ChatWindowTopComponent.class, "ChatWindowTopComponent.sendButton.text")); // NOI18N
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 1;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(sendButton, gridBagConstraints);

        clearButton.setBackground(new java.awt.Color(51, 51, 51));
        clearButton.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        clearButton.setForeground(new java.awt.Color(0, 255, 0));
        org.openide.awt.Mnemonics.setLocalizedText(clearButton, org.openide.util.NbBundle.getMessage(ChatWindowTopComponent.class, "ChatWindowTopComponent.clearButton.text")); // NOI18N
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(clearButton, gridBagConstraints);

        modelComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "gpt-4o", "gpt-3.5-turbo" }));
        modelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 233;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(modelComboBox, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private String readApiKeyFromFile() throws IOException {
        String userHome = System.getProperty("user.home");
        String configDir = ".config" + File.separator + "chatgpt";
        String apiKeyFile = "apikey.txt";

        Path path = Paths.get(userHome, configDir, apiKeyFile);
        File file = path.toFile();

        // Check if the file exists and is readable
        if (!file.exists()) {
            throw new IOException("API key file not found: " + file.getAbsolutePath());
        }
        if (!file.canRead()) {
            throw new IOException("Cannot read API key file: " + file.getAbsolutePath());
        }

        // Read the file using BufferedReader
        StringBuilder apiKey = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                apiKey.append(line);
            }
        }

        String apiKeyString = apiKey.toString().trim();
        return apiKeyString;
    }

    /**
     * sendButtonActionPerformed is performed when the Send button's action is
     * performed.
     * 
     * @param evt 
     */
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        String prompt = promptTextField.getText();
        promptTextField.setText("");

        // Append user message to conversation history
        conversationHistory.put(new JSONObject().put("role", "user").put("content", prompt));
        responseTextArea.append("You: " + prompt + "\n");

        // Make the API call with conversation history and update the response area
        new Thread(() -> {
            try {
                String response = callChatGPTAPI(conversationHistory);
                JSONObject jsonResponse = new JSONObject(response);
                JSONArray choices = jsonResponse.getJSONArray("choices");
                String reply = choices.getJSONObject(0).getJSONObject("message").getString("content");
                // Append assistant message to history
                conversationHistory.put(new JSONObject().put("role", "assistant").put("content", reply));
                javax.swing.SwingUtilities.invokeLater(() -> {
                    responseTextArea.append("ChatGPT: " + reply + "\n");
                });
            } catch (Exception e) {
                e.printStackTrace();
                javax.swing.SwingUtilities.invokeLater(() -> {
                    responseTextArea.append("Error: " + e.getMessage() + "\n");
                });
            }
        }).start();
    }//GEN-LAST:event_sendButtonActionPerformed
    
    /**
     * callChatGPTAPI() is a private method that calls the ChatGPT API.
     * 
     * @param prompt
     * @return String
     * @throws IOException 
     */
    private String callChatGPTAPI(JSONArray messages) throws IOException {
        OkHttpClient client = new OkHttpClient();

        // API URL for chat completions
        String apiUrl = "https://api.openai.com/v1/chat/completions";
        String apiKey = readApiKeyFromFile();  // Ensure this is your actual API key

        JSONObject json = new JSONObject();
        json.put("model", currentModel);
        json.put("messages", messages);

        RequestBody body = RequestBody.create(
                json.toString(), MediaType.parse("application/json; charset=utf-8"));

        Request request = new Request.Builder()
                .url(apiUrl)
                .post(body)
                .addHeader("Authorization", "Bearer " + apiKey)
                .build();

        try (Response response = client.newCall(request).execute()) {
            if (!response.isSuccessful()) {
                throw new IOException("Unexpected code " + response);
            }
            return response.body().string();
        }
    }

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {
        conversationHistory = new JSONArray();
        conversationHistory.put(new JSONObject().put("role", "system").put("content", systemPrompt));
        responseTextArea.setText("");
    }

    private void modelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
        Object selected = modelComboBox.getSelectedItem();
        if (selected != null) {
            currentModel = selected.toString();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField promptTextField;
    private javax.swing.JTextArea responseTextArea;
    private javax.swing.JButton sendButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JComboBox<String> modelComboBox;
    // End of variables declaration//GEN-END:variables
    
    /**
     * componentOpened kicks off when this Top Component ChatWindow is opened.
     */
    @Override
    public void componentOpened() {
        promptTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                    sendButton.doClick();
                }
            }
        });
        
        // Set focus to the prompt text field
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                promptTextField.requestFocusInWindow();
            }
        });

        modelComboBox.setSelectedItem(currentModel);
        
        try {
            // Attempt to read the API key on startup to ensure it's available
            readApiKeyFromFile();
        } catch (IOException e) {
            responseTextArea.append("Error: Unable to read API key from file.\n");
            responseTextArea.append("Please ensure the API key file is located at ~/.config/chatgpt/apikey.txt\n");
            responseTextArea.append(e.toString());
        }
    }

    /**
     * A sort of destructor, if needed. 
     */
    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "2.0");
        p.setProperty("model", currentModel);
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        if (version != null && version.startsWith("2")) {
            String savedModel = p.getProperty("model");
            if (savedModel != null) {
                currentModel = savedModel;
            }
        }
    }
}
